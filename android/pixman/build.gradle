apply plugin: "com.android.model.library"


model {
    android {
        compileSdkVersion = 25
        buildToolsVersion = '25.0.2'

        defaultConfig {
            minSdkVersion.apiLevel = 9
            targetSdkVersion.apiLevel = 9
            versionCode = 1
            versionName = '1.0'
        }
        ndk {
            platformVersion = 21
            moduleName = "pixman"
            toolchain = 'clang'
            abiFilters.addAll(['armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64']) //this is default
            ldLibs.addAll(['android', 'log'])
            stl = 'c++_static'
            cppFlags.add("-std=c++11")
            cppFlags.add("-fexceptions")
            cppFlags.add("-frtti")
            CFlags.addAll("-DPIXMAN_NO_TLS", "-DHAVE_CONFIG_H")
            CFlags.add("-I" + projectDir.getAbsolutePath() + "/../../COPKG")
            cppFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include")
        }
        abis {
            create("armeabi") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/armeabi")
            }
            create("armeabi-v7a") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/armeabi-v7a")
            }
            create("arm64-v8a") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/arm64-v8a")
            }
            create("x86") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86")
            }
            create("x86_64") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86_64")
            }
            create("mips") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/mips")
            }
            create("mips64") {
                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/mips64")
            }
        }
    }

    android.lintOptions {
        abortOnError false
    }

    android.sources {
        main {
            jni {
                exportedHeaders {
                    srcDir "../../pixman/"
                }
                source {
                    srcDir '../../pixman'
                    exclude "**/pixman-arm-neon.c"
                    exclude "**/pixman-arm-simd.c"
                    exclude "**/pixman-mips-dspr2.c"
                    exclude "**/pixman-mmx.c"
                    exclude "**/pixman-region.c"
                    exclude "**/pixman-sse2.c"
                    exclude "**/pixman-ssse3.c"
                    exclude "**/pixman-vmx.c"

//Files list should be:
//                    pixman.c,
//                    pixman-access.c,
//                    pixman-access-accessors.c,
//                    pixman-bits-image.c,
//                    pixman-combine32.c,
//                    pixman-combine-float.c,
//                    pixman-conical-gradient.c,
//                    pixman-filter.c,
//                    pixman-x86.c,
//                    pixman-mips.c,
//                    pixman-arm.c,
//                    pixman-ppc.c,
//                    pixman-edge.c,
//                    pixman-edge-accessors.c,
//                    pixman-fast-path.c,
//                    pixman-glyph.c,
//                    pixman-general.c,
//                    pixman-gradient-walker.c,
//                    pixman-image.c,
//                    pixman-implementation.c,
//                    pixman-linear-gradient.c,
//                    pixman-matrix.c,
//                    pixman-noop.c,
//                    pixman-radial-gradient.c,
//                    pixman-region16.c,
//                    pixman-region32.c,
//                    pixman-solid-fill.c,
//                    pixman-timer.c,
//                    pixman-trap.c,
//                    pixman-utils.c
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://dl.bintray.com/igagis/android/'
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile 'io.github.igagis:libutki:+'
//    compile 'io.github.igagis:libpapki:+'
//    compile 'org.pugixml:pugixml:+'
}


//===================================
//=== Extract NDK files from AARs ===

task extractNDKLibs {
    doLast {
        configurations.compile.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "build/"
                include "ndkLibs/**/*"
            }
        }
    }
}
build.dependsOn('extractNDKLibs')
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('compile')) {
        task.dependsOn('extractNDKLibs')
    }
}



//=================================
//=== pack library files to aar ===


def aarName = name

task copyNdkLibsToAAR(type: Zip) {
    baseName = aarName
    version = "\$(version)"
    extension = 'aar.in'
    destinationDir = file('..') //put resulting AAR file to upper level directory

    from zipTree("build/outputs/aar/" + aarName + "-release.aar")
    exclude('**/*.so') //do not include shared libraries into final AAR
    from("../../COPKG") {
        include('**/pixman-version.h')
//        exclude('makefile')
//        exclude('soname.txt')
//        exclude('**/*.cpp')
//        exclude('**/*.c')
        into('ndkLibs/include/')
    }
    from("../../pixman") {
        include('**/*.h')
//        exclude('makefile')
//        exclude('soname.txt')
//        exclude('**/*.cpp')
//        exclude('**/*.c')
        into('ndkLibs/include/pixman')
    }
    from("build/intermediates/binaries/debug/lib"){
        include('**/*.a')
        into('ndkLibs')
    }
}

build.finalizedBy('copyNdkLibsToAAR')
